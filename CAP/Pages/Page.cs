using System;
using UpdateControls;

namespace CAP.Pages
{
    public interface IPage
    {
        string Tag { get; }
        PageNavigationModel PageNavigation { get; }
        string Title { get; }
        string Notes { get; set; }
        string CurrentState { get; }
        void ChangeState(int offset);
    }
    public abstract class Page : IPage
    {
        private PresentationNavigationModel _presentationNavigation;
        private string _tag;
        private string _title;

        private PageNavigationModel _pageNavigation;
        private string _notes;

        protected Page(PresentationNavigationModel presentationNavigation, string tag, string title)
        {
            _presentationNavigation = presentationNavigation;
            _tag = tag;
            _title = title;

            _pageNavigation = new PageNavigationModel();
        }

        public PageNavigationModel PageNavigation
        {
            get { return _pageNavigation; }
        }

        public string Tag
        {
            get { return _tag; }
        }

        public string Title
        {
            get { return _title; }
        }

        public virtual string CurrentState
        {
            get { return string.Empty; }
        }

        public virtual void ChangeState(int offset)
        {
        }
 
        #region Independent properties
        // Generated by Update Controls --------------------------------
        private Independent _indNotes = new Independent();

        public string Notes
        {
            get { _indNotes.OnGet(); return _notes; }
            set { _indNotes.OnSet(); _notes = value; }
        }
        // End generated code --------------------------------
        #endregion
   }
}
